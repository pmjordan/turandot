tosca_definitions_version: tosca_simple_yaml_1_3

metadata:

  # This scriptlet is used by the "configure" interface
  puccini.scriptlet.import:oda.set-output: artifacts/scriptlets/set-output.js

imports:

- namespace_prefix: k8s
  file: profiles/kubernetes/1.0/profile.yaml
- namespace_prefix: o11n
  file: profiles/orchestration/1.0/profile.yaml
- namespace_prefix: mariadb
  file: profiles/mariadb/profile.yaml
- namespace_prefix: tmforum
  file: profiles/tmforum/profile.yaml



node_types:

  sigscale-ocs:
    derived_from: tmforum:component
    description: "SigScale Online Charging System (OCS)"
    # see https://github.com/tmforum-rand/oda-component-definitions/blob/master/components/sigscale-ocs.component.yaml



  odac:
    description: "a type of node to represent TMForum ODA controller"
    capabilities:
      # The Metadata capability will be shared with all resources
      # Only one should be used per node type
      metadata: k8s:Metadata
      # Other capabilities can be added to represent Kubernetes resources
      # (The same capability type can be used multiple times, e.g. two LoadBalancers)
      deployment: k8s:Deployment

      
  # The Kubernetes profile comprises capability types, not node types
  # You need to create your own node type that is an assemblage of capabilities
  # In other words, the node is where we logically relate Kubernetes resources together
  Application:
    capabilities:
      # The Metadata capability will be shared with all resources
      # Only one should be used per node type
      metadata: k8s:Metadata
      # Other capabilities can be added to represent Kubernetes resources
      # (The same capability type can be used multiple times, e.g. two LoadBalancers)
      deployment: k8s:Deployment
      web: k8s:LoadBalancer
    interfaces:
      # Interfaces are used to achieve service modes
      # The name of the interface is used by default as the name of the mode
      # (Anything after "." in the name is ignored for this purpose)
      normal.1:
        type: k8s:ContainerCommand
      normal.2:
        type: o11n:Scriptlet

topology_template:

  inputs:

    namespace:
      type: string
      default: workspace

  node_templates:

    oda:
      type: Application
      capabilities:
        metadata:
          properties:
            # If "name" is not specified, the TOSCA node template name will be used
            # If "namespace" is not set, resources will be created in the same namespace as
            # the Turandot operator 
            namespace: { get_input: namespace }
            labels:
              app.kubernetes.io/name: oda
        deployment:
          properties:
            metadataNamePostfix: ''
            template:
              containers:
              - name: oda
                image: docker.io/paulbouwer/hello-kubernetes:1.8
                imagePullPolicy: Always
        web:
          properties:
            ports:
            - { name: http, protocol: TCP, port: 80, targetPort: 8080 }
          attributes:
            # We're initializing this attribute to make sure the call to get_attribute in the output
            # won't fail before a real value arrives
            ingress:
            - ip: <unknown>
      interfaces:
        # The interfaces are executed in alphabetical order
        # The previous execution must succeed before moving on to the next
        normal.1:
          inputs:
            # The command is executed with the contents of the Clout in stdin
            # If the command has a non-empty stdout, it will be used to replace the current Clout
            # This combination allows the command to manipulate the Clout if desired
            command:
            - /tmp/configure.sh
            - $$nodeTemplate # arguments beginning with "$$" will be replaced with local values
            # Artifacts are copied to the target container before execution
            artifacts:
            - configure # See below
        normal.2:
          inputs:
            scriptlet: oda.set-output
            arguments:
              name: initialized
              value: 'true'
      artifacts:
        configure:
          # The Executable type will set executable permissions on the file
          type: o11n:Executable
          file: artifacts/scripts/configure.sh
          deploy_path: /tmp/configure.sh

    odac:
      type: odac
      # An ODA controller deployed using HELM
      description: "see https://github.com/tmforum-rand/oda-component-definitions"
      capabilities:
        metadata:
          properties:
            # If "name" is not specified, the TOSCA node template name will be used
            # If "namespace" is not set, resources will be created in the same namespace as
            # the Turandot operator 
            namespace: { get_input: namespace }
            labels:
              app.kubernetes.io/name: odac
        deployment:
          properties:
            metadataNamePostfix: ''
            template:
              containers:
              - name: oda
                image: tmforumodacanvas/component-controller
                imagePullPolicy: Always


    # odac-alt:
    # # An ODA controller deployed using TOSCA
    # type: ODAoperator
    # capabilities:
    #   properties:
    #         conversion:
    #           strategy: None
    #         group: components.
    #         names:
    #           kind: "component"
    #           plural: "components"
    #           singular: "component"
    #         scope: "Namespaced"
    #         versions:
    #           - name: "v1alpha1"
    #             served: true
    #             storage: false
    #             #   deprecated: true
    #             #   deprecationWarning: "oda.tmforum.org/v1alpha1 Component is deprecated; Please upgrade to oda.tmforum.org/v1alpha2 see https://github.com/tmforum-oda/oda-canvas-charts/issues/9"  
    #             schema:
    #               openAPIV3Schema:
    #                 type: object
    #                 # TODO Properties commented out as puccini has not implemented them
    #                 #properties:
    #                 #  spec:
    #                 #     type: object
    #                 #     properties:     
    #                 #       coreFunction:
    #                 #         type: object  
    #                 #         properties:  
    #                 #           exposedAPIs:   
    #                 #             type: array
    #                 #             items:
    #                 #               type: object
    #                 #               properties:
    #                 #                 name:
    #                 #                   type: string
    #                 #                 specification:
    #                 #                   type: string
    #                 #                 implementation:
    #                 #                   type: string
    #                 #                 path:
    #                 #                   type: string
    #                 #                 developerUI:
    #                 #                   type: string
    #                 #                 port:
    #                 #                   type: integer
    #                 #           dependantAPIs:   
    #                 #             type: array
    #                 #             items:
    #                 #               type: object
    #                 #               properties:
    #                 #                 name:
    #                 #                   type: string
    #                 #                 specification:
    #                 #                   type: string
    #                 #                 path:
    #                 #                   type: string
    #                 #       eventNotification:
    #                 #         type: object  
    #                 #         properties:  
    #                 #           publishedEvents: 
    #                 #             type: array
    #                 #             items:
    #                 #               type: object
    #                 #               properties:
    #                 #                 name:
    #                 #                   type: string
    #                 #                 href:
    #                 #                   type: string
    #                 #           subscribedEvents: 
    #                 #             type: array
    #                 #             items:
    #                 #               type: object
    #                 #               properties:
    #                 #                 name:
    #                 #                   type: string
    #                 #                 href:
    #                 #                   type: string
    #                 #       management:
    #                 #         type: array
    #                 #         items:
    #                 #           type: object
    #                 #           properties:
    #                 #             name:
    #                 #               type: string
    #                 #             href:
    #                 #               type: string
    #                 #             specification:
    #                 #               type: string
    #                 #       security:
    #                 #         type: object  
    #                 #         properties:
    #                 #           securitySchemes: 
    #                 #             type: object
    #                 #             x-kubernetes-preserve-unknown-fields: true                        
    #                 #       version:
    #                 #         type: string
    #                 #       description:
    #                 #         type: string
    #                 #       type:
    #                 #         type: string
    #                 #       selector:
    #                 #         type: object
    #                 #         x-kubernetes-preserve-unknown-fields: true    
    #                 #       componentKinds:
    #                 #         type: array
    #                 #         items:
    #                 #           type: object
    #                 #           x-kubernetes-preserve-unknown-fields: true    
    #                 #       maintainers:
    #                 #         type: array
    #                 #         items:
    #                 #           type: object
    #                 #           x-kubernetes-preserve-unknown-fields: true    
    #                 #       owners:
    #                 #         type: array
    #                 #         items:
    #                 #           type: object
    #                 #           x-kubernetes-preserve-unknown-fields: true    
    #                 #   status:
    #                 #     type: object
    #                 #     x-kubernetes-preserve-unknown-fields: true    
    #             additionalPrinterColumns:
    #             - name: exposed_APIs
    #               type: string
    #               description: list the endpoints for exposed APIs
    #               jsonPath: .status.exposedAPIsummary
    #             - name: developer_UI
    #               type: string
    #               description: list the Developer User Interface(s)
    #               jsonPath: .status.developerUIsummary
    #             - name: deployment_status
    #               type: string
    #               description: Deployment status [in progress, complete, failed]
    #               jsonPath: .status.deployment_status


    my-sigscale-ocs:
      type: sigscale-ocs
      capabilities:
        metadata:
          properties:
            # If "name" is not specified, the TOSCA node template name will be used
            # If "namespace" is not set, resources will be created in the same namespace as
            # the Turandot operator 
            namespace: { get_input: namespace }
            labels:
              app.kubernetes.io/name: sigscale-ocs
        oda-component:
          # In TOSCA 1.2  property assignments within capabilities can only be made in the node template. TODO convert to TOSCA v2 and 
          # assign values where they are common to all ODA components.
          properties:
            version: "1.0.0"
            # description: "SigScale Online Charging System (OCS)"
            type: "ocs"
            selector:
              matchLabels:
                oda.tmforum.org/componentName: sigscale-oc
            componentKinds:
              - group: core
                kind: Service
              - group: apps
                kind: Deployment
            maintainers:
              - name: SigScale
                email: support@sigscale.com
            owners:
              - name: SigScale
                email: support@sigscale.com
            coreFunction:
              exposedAPIs:
              - name: party
                specification: https://github.com/tmforum/TMFAPISWAGGER/blob/develop/partyManagement/v2/swagger2.json
                implementation: sigscale-ocs-service
                path: /partyManagement/v1/
                port: 8080
              - name: productCatalog
                specification: https://github.com/tmforum/TMFAPISWAGGER/blob/develop/productCatalog/v2/swagger2.json
                implementation: sigscale-ocs-service
                path: /productCatalogManagement/v2/
                port: 8080
              - name: serviceCatalog
                specification: https://github.com/tmforum/TMFAPISWAGGER/blob/develop/serviceCatalogManagement/v2/swagger2.json
                implementation: sigscale-ocs-service
                path: /serviceCatalogManagement/v2/
                port: 8080
              - name: resourceCatalog
                specification:
                implementation: sigscale-ocs-service
                path: /resourceCatalogManagement/v2/
                port: 8080
              - name: resourceInventory
                specification: https://github.com/tmforum/TMFAPISWAGGER/blob/develop/resourceInventoryManagement/v3/swagger2.json
                implementation: sigscale-ocs-service
                path: /resourceInventoryManagement/v1/
                port: 8080
              - name: productInventory
                specification: https://github.com/tmforum/TMFAPISWAGGER/blob/develop/productInventory/v2/swagger2.json
                implementation: sigscale-ocs-service
                path: /productInventoryManagement/v2/
                port: 8080
              - name: serviceInventory
                specification:
                implementation: sigscale-ocs-service
                path: /serviceInventoryManagement/v2/
                port: 8080
              - name: usage
                specification: https://github.com/tmforum/TMFAPISWAGGER/blob/develop/usageManagement/v2/swagger2.json
                implementation: sigscale-ocs-service
                path: /usageManagement/v1/
                port: 8080
              - name: balance
                specification:
                implementation: sigscale-ocs-service
                path: /balanceManagement/v1/
                port: 8080
              dependantAPIs: []
  outputs:

    url:
      # Before a real attribute value arrives this will evaluate to "http://<unknown>:80"
      type: string
      value: { concat: [ http://, { get_attribute: [ oda, web, ingress, 0, ip ] }, ':80' ] }

    initialized:
      type: boolean
      value: false
