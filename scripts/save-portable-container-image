#!/bin/bash
set -e

# Requirements (Fedora):
#   sudo dnf install podman jq pigz

HERE=$(dirname "$(readlink --canonicalize "$BASH_SOURCE")")
. "$HERE/_env"
. "$HERE/_trap"

if (( "$#" < 2 )); then
	echo 'usage: save-portable-container-image [IMAGE NAME] [FILE PATH]'
	exit 1
fi

if command -v podman &> /dev/null; then
	CONTAINER_IMAGE_TOOL=podman
else
	CONTAINER_IMAGE_TOOL=docker
fi

if ! command -v "$CONTAINER_IMAGE_TOOL" &> /dev/null; then
	m 'missing container image tool: `podman` or `docker`' "$RED"
	MISSING=true
fi

if command -v pigz &> /dev/null; then
	GZIP_TOOL=pigz
else
	GZIP_TOOL=gzip
fi

if ! command -v "$GZIP_TOOL" &> /dev/null; then
	m 'missing gzip tool: `pigz` or `gzip`' "$RED"
	MISSING=true
fi

if ! command -v tar &> /dev/null; then
	m 'missing `tar` tool' "$RED"
	MISSING=true
fi

if ! command -v jq &> /dev/null; then
	m 'missing `jq` tool' "$RED"
	MISSING=true
fi

if [ "$MISSING" == true ]; then
	exit 1
fi

IMAGE=$1
FILE=$2

EXTENSION=${FILE#*.}
if [ "$EXTENSION" != tar.gz ]; then
	m 'file extension must be tar.gz' "$RED"
	exit 1
fi

WORK=$(mktemp --directory)

copy_function goodbye old_goodbye
function goodbye () {
	rm --recursive --force "$WORK"
	old_goodbye $1
}

# Save
m "saving $IMAGE..."
"$CONTAINER_IMAGE_TOOL" save "$IMAGE" --output "$WORK/image.tar"

# Unpack
m "unpacking..."
mkdir --parents "$WORK/image"
tar --extract --file="$WORK/image.tar" --directory="$WORK/image"

# Fix
cat "$WORK/image/manifest.json" | jq '.[].RepoTags += ["portable"]' > "$WORK/image/manifest.json~" 
mv --force "$WORK/image/manifest.json~" "$WORK/image/manifest.json"

# Repack
m "repacking to $FILE..."
pushd "$WORK/image" > /dev/null
tar --create --use-compress-program="$GZIP_TOOL" --file="$FILE" *
popd > /dev/null
