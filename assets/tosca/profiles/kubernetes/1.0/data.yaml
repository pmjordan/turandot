tosca_definitions_version: tosca_simple_yaml_1_3

data_types:

  Count:
    derived_from: integer
    constraints:
    - greater_or_equal: 0

  Factor:
    metadata:
      puccini.information:turandot.format: percentage
    derived_from: float
    constraints:
    - in_range: [ 0.0, 1.0 ]

  Amount:
    properties:
      factor:
        type: Factor
        required: false
      count:
        type: Count
        required: false

  IP:
    derived_from: string

  Port:
    derived_from: integer
    constraints:
    - in_range: [ 1, 65535 ]

  # https://stackoverflow.com/questions/2063213/regular-expression-for-validating-dns-label-host-name
  Hostname:
    derived_from: string
    constraints:
    - pattern: ^(?!-)[a-zA-Z0-9-]{1,63}(?<!-)$

  LabelSelector:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#labelselector-v1-meta'
    description: >-
      A label selector is a label query over a set of resources. The result of matchLabels and
      matchExpressions are ANDed. An empty label selector matches all objects. A null label selector
      matches no objects.
    properties:
      matchExpressions:
        description: >-
          matchExpressions is a list of label selector requirements. The requirements are ANDed.
        type: list
        entry_schema: LabelSelectorRequirement
        required: false
      matchLabels:
        description: >-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
          equivalent to an element of matchExpressions, whose key field is "key", the operator is
          "In", and the values array contains only "value". The requirements are ANDed.
        type: map
        entry_schema: string
        required: false

  LabelSelectorRequirement:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#labelselectorrequirement-v1-meta'
    description: >-
      A label selector requirement is a selector that contains values, a key, and an operator that
      relates the key and values.
    properties:
      key:
        description: >-
          key is the label key that the selector applies to.
        type: string
      operator:
        description: >-
          operator represents a key's relationship to a set of values. Valid operators are In,
          NotIn, Exists and DoesNotExist.
        type: string
        constraints:
        - valid_values: [ In, NotIn, Exists, DoesNotExist ]
      values:
        description: >-
          values is an array of string values. If the operator is In or NotIn, the values array
          must be non-empty. If the operator is Exists or DoesNotExist, the values array must be
          empty. This array is replaced during a strategic merge patch.
        type: list
        entry_schema: string

  ServicePort:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#serviceport-v1-core'
    description: >-
      ServicePort contains information on service's port.
    properties:
      name:
        description: >-
          The name of this port within the service. This must be a DNS_LABEL. All ports within a
          ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort
          objects. Optional if only one ServicePort is defined on this service.
        type: Hostname
        required: false
      port:
        description: >-
          The port that will be exposed by this service.
        type: Port
      nodePort:
        description: >-
          The port on each node on which this service is exposed when type=NodePort or LoadBalancer.
          Usually assigned by the system. If specified, it will be allocated to the service if
          unused or else creation of the service will fail. Default is to auto-allocate a port if
          the ServiceType of this Service requires one.
        type: Port
        required: false
      targetPort:
        description: >-
          Number or name of the port to access on the pods targeted by the service. Number must be
          in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is not specified, the
          value of the 'port' field is used (an identity map). This field is ignored for services
          with clusterIP=None, and should be omitted or set equal to the 'port' field.
        type: Port
        required: false
      targetPortName:
        description: >-
          If this is a string, it will be looked up as a named port in the target Pod's container
          ports.
        type: string
        required: false
      protocol:
        description: >-
          The IP protocol for this port. Supports "TCP" and "UDP". Default is TCP.
        type: string
        default: TCP
        constraints:
        - valid_values: [ TCP, UDP ]

  ContainerPort:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#containerport-v1-core'
    description: >-
      ContainerPort represents a network port in a single container.
    properties:
      name:
        description: >-
          If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in
          a pod must have a unique name. Name for the port that can be referred to by services.
        type: string
        required: false
      containerPort:
        description: >-
          Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x
          < 65536.
        type: Port
      hostPort:
        description: >-
          Number of port to expose on the host. If specified, this must be a valid port number, 0 <
          x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do
          not need this.
        type: Port
        required: false
      hostIP:
        description: >-
          What host IP to bind the external port to.
        type: IP
        required: false
      protocol:
        description: >-
          Protocol for port. Must be UDP or TCP. Defaults to "TCP".
        type: string
        default: TCP
        constraints:
        - valid_values: [ TCP, UDP ]

  LoadBalancerIngress:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#loadbalanceringress-v1-core'
    description: >-
      LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended
      for the service should be sent to an ingress point.
    properties:
      hostname:
        description: >-
          Hostname is set for load-balancer ingress points that are DNS based (typically AWS
          load-balancers)
        type: string
        required: false
      ip:
        description: >-
          IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack
          load-balancers)
        type: IP
        required: false

  DeploymentStrategy:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#deploymentstrategy-v1-apps'
    description: >-
      The deployment strategy to use to replace existing pods with new ones.
    properties:
      type:
        description: >-
          Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
        type: string
        default: RollingUpdate
        constraints:
        - valid_values: [ Recreate, RollingUpdate ]
      maxSurge:
        description: >-
          The maximum number of pods that can be scheduled above the desired number of pods. Value
          can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not
          be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up.
          Defaults to 25%. Example: when this is set to 30%, the new RC can be scaled up immediately
          when the rolling update starts, such that the total number of old and new pods do not
          exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up
          further, ensuring that total number of pods running at any time during the update is at
          most 130% of desired pods.
        type: Amount
        default:
          factor: .25
      maxUnavailable:
        description: >-
          The maximum number of pods that can be unavailable during the update. Value can be an
          absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is
          calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults
          to 25%. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired
          pods immediately when the rolling update starts. Once new pods are ready, old RC can be
          scaled down further, followed by scaling up the new RC, ensuring that the total number of
          pods available at all times during the update is at least 70% of desired pods.
        type: Amount
        default:
          factor: .25

  Pod:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#podspec-v1-core'
    description: >-
      Pod is a collection of containers that can run on a host. This resource is created by clients
      and scheduled onto hosts.
    properties:
      # Resources
      containers:
        description: >-
          List of containers belonging to the pod. Containers cannot currently be added or removed.
          There must be at least one container in a Pod. Cannot be updated.
        type: list
        entry_schema: Container
        constraints:
        - min_length: 1
      initContainers:
        description: >-
          List of initialization containers belonging to the pod. Init containers are executed in
          order prior to containers being started. If any init container fails, the pod is
          considered to have failed and is handled according to its restartPolicy. The name for an
          init container or normal container must be unique among all containers. Init containers
          may not have Lifecycle actions, Readiness probes, or Liveness probes. The
          resourceRequirements of an init container are taken into account during scheduling by
          finding the highest request/limit for each resource type, and then using the max of of
          that value or the sum of the normal containers. Limits are applied to init containers in a
          similar fashion. Init containers cannot currently be added or removed. Cannot be updated.
        type: list
        entry_schema: Container
        required: false
      volumes:
        description: >-
          List of volumes that can be mounted by containers belonging to the pod.
        type: list
        entry_schema: Volume
        required: false

      # Scheduling
      schedulerName:
        description: >-
          If specified, the pod will be dispatched by specified scheduler. If not specified, the pod
          will be dispatched by default scheduler.
        type: string
        required: false
      affinity:
        description: >-
          If specified, the pod's scheduling constraints
        type: Affinity
        required: false
      nodeName:
        description: >-
          NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the
          scheduler simply schedules this pod onto that node, assuming that it fits resource
          requirements.
        type: string
        required: false
      nodeSelector:
        description: >-
          NodeSelector is a selector which must be true for the pod to fit on a node. Selector which
          must match a node's labels for the pod to be scheduled on that node.
        type: string # TODO
        required: false

      # Priority
      priorityClassName:
        description: >-
          If specified, indicates the pod's priority. "system-node-critical" and
          "system-cluster-critical" are two special keywords which indicate the highest priorities
          with the former being the highest priority. Any other name must be defined by creating a
          PriorityClass object with that name. If not specified, the pod priority will be default or
          zero if there is no default.
        type: string
        required: false
      priority:
        description: >-
          The priority value. Various system components use this field to find the priority of the
          pod. When Priority Admission Controller is enabled, it prevents users from setting this
          field. The admission controller populates this field from PriorityClassName. The higher
          the value, the higher the priority.
        type: integer
        required: false

      # Lifecycle
      restartPolicy:
        description: >-
          Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default
          to Always.
        type: string
        default: Always
        constraints:
        - valid_values: [ Always, OnFailure, Never ]
      tolerations:
        description: >-
          If specified, the pod's tolerations.
        type: string # TODO
        required: false
      activeDeadlineSeconds:
        description: >-
          Optional duration in seconds the pod may be active on the node relative to StartTime
          before the system will actively try to mark it failed and kill associated containers.
          Value must be a positive integer.
        type: scalar-unit.time
        required: false
      terminationGracePeriodSeconds:
        description: >-
          Optional duration in seconds the pod needs to terminate gracefully. May be decreased in
          delete request. Value must be non-negative integer. The value zero indicates delete
          immediately. If this value is nil, the default grace period will be used instead. The
          grace period is the duration in seconds after the processes running in the pod are sent a
          termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process. Defaults to 30
          seconds.
        type: scalar-unit.time
        required: false

      # DNS
      hostname:
        description: >-
          Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a
          system-defined value.
        type: Hostname
        required: false
      subdomain:
        description: >-
          If specified, the fully qualified Pod hostname will be
          "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod
          will not have a domainname at all.
        type: string
        required: false
      dnsConfig:
        description: >-
          Specifies the DNS parameters of a pod. Parameters specified here will be merged to the
          generated DNS configuration based on DNSPolicy.
        type: string # TODO
        required: false
      dnsPolicy:
        description: >-
          Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are
          'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in
          DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set
          along with hostNetwork, you have to specify DNS policy explicitly to
          'ClusterFirstWithHostNet'.
        type: string
        default: ClusterFirst
        constraints:
        - valid_values: [ ClusterFirstWithHostNet, ClusterFirst, Default, None ]
      hostAliases:
        description: >-
          HostAliases is an optional list of hosts and IPs that will be injected into the pod's
          hosts file if specified. This is only valid for non-hostNetwork pods.
        type: string # TODO
        required: false

      # Host
      hostIPC:
        description: >-
          Use the host's ipc namespace. Optional: Default to false.
        type: boolean
        default: false
      hostNetwork:
        description: >-
          Host networking requested for this pod. Use the host's network namespace. If this option
          is set, the ports that will be used must be specified. Default to false.
        type: boolean
        default: false
      hostPID:
        description: >-
          Use the host's pid namespace. Optional: Default to false.
        type: boolean
        default: false
      shareProcessNamespace:
        description: >-
          Share a single process namespace between all of the containers in a pod. When this is set
          containers will be able to view and signal processes from other containers in the same
          pod, and the first process in each container will not be assigned PID 1. HostPID and
          ShareProcessNamespace cannot both be set. Optional: Default to false. This field is
          alpha-level and is honored only by servers that enable the PodShareProcessNamespace
          feature.
        type: boolean
        default: false

      # Security
      securityContext:
        description: >-
          SecurityContext holds pod-level security attributes and common container settings.
          Optional: Defaults to empty. See type description for default values of each field.
        type: PodSecurityContext
        required: false
      serviceAccountName:
        description: >-
          ServiceAccountName is the name of the ServiceAccount to use to run this pod.
        type: string
        required: false
      automountServiceAccountToken:
        description: >-
          AutomountServiceAccountToken indicates whether a service account token should be
          automatically mounted.
        type: boolean
        required: false
      imagePullSecrets:
        description: >-
          ImagePullSecrets is an optional list of references to secrets in the same namespace to use
          for pulling any of the images used by this PodSpec. If specified, these secrets will be
          passed to individual puller implementations for them to use. For example, in the case of
          docker, only DockerConfig type secrets are honored.
        type: string # TODO
        required: false

  Container:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#container-v1-core'
    description: >-
      A single application container that you want to run within a pod.
    properties:
      name:
        description: >-
          Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique
          name (DNS_LABEL). Cannot be updated.
        type: Hostname

      # Image
      image:
        description: >-
          Docker image name. This field is optional to allow higher level config management to
          default or override container images in workload controllers like Deployments and
          StatefulSets.
        type: string
        required: false
      imagePullPolicy:
        description: >-
          Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag
          is specified, or IfNotPresent otherwise. Cannot be updated.
        type: string
        default: Always
        constraints:
        - valid_values: [ Always, Never, IfNotPresent ]

      # Resources
      resources:
        description: >-
          Compute Resources required by this container. Cannot be updated.
        type: string # TODO
        required: false
      volumeMounts:
        description: >-
          Pod volumes to mount into the container's filesystem. Cannot be updated.
        type: list
        entry_schema: VolumeMount
        required: false
      volumeDevices:
        description: >-
          volumeDevices is the list of block devices to be used by the container. This is an alpha
          feature and may change in the future.
        type: string # TODO
        required: false

      ports:
        description: >-
          List of ports to expose from the container. Exposing a port here gives the system
          additional information about the network connections a container uses, but is primarily
          informational. Not specifying a port here DOES NOT prevent that port from being exposed.
          Any port which is listening on the default "0.0.0.0" address inside a container will be
          accessible from the network. Cannot be updated.
        type: list
        entry_schema: ContainerPort
        required: false

      # Terminal
      stdin:
        description: >-
          Whether this container should allocate a buffer for stdin in the container runtime. If
          this is not set, reads from stdin in the container will always result in EOF. Default is
          false.
        type: boolean
        default: false
      stdinOnce:
        description: >-
          Whether the container runtime should close the stdin channel after it has been opened by a
          single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until
          the first client attaches to stdin, and then remains open and accepts data until the
          client disconnects, at which time stdin is closed and remains closed until the container
          is restarted. If this flag is false, a container processes that reads from stdin will
          never receive an EOF. Default is false
        type: boolean
        default: false
      tty:
        description: >-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
        type: boolean
        default: false

      # Execution
      workingDir:
        description: >-
          Container's working directory. If not specified, the container runtime's default will be
          used, which might be configured in the container image. Cannot be updated.
        type: string # TODO
        required: false
      command:
        description: >-
          Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if
          this is not provided. Variable references $(VAR_NAME) are expanded using the container's
          environment. If a variable cannot be resolved, the reference in the input string will be
          unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME).
          Escaped references will never be expanded, regardless of whether the variable exists or
          not. Cannot be updated.
        type: list
        entry_schema: string
        required: false
      args:
        description: >-
          Arguments to the entrypoint. The docker image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a
          variable cannot be resolved, the reference in the input string will be unchanged. The
          $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references
          will never be expanded, regardless of whether the variable exists or not. Cannot be
          updated.
        type: list
        entry_schema: string
        required: false
      env:
        description: >-
          List of environment variables to set in the container. Cannot be updated.
        type: list
        entry_schema: EnvVar
        required: false
      envFrom:
        description: >-
          List of sources to populate environment variables in the container. The keys defined
          within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when
          the container is starting. When a key exists in multiple sources, the value associated
          with the last source will take precedence. Values defined by an Env with a duplicate key
          will take precedence. Cannot be updated.
        type: list
        entry_schema: string # TODO
        required: false

      # Lifecycle
      lifecycle:
        description: >-
          Actions that the management system should take in response to container lifecycle events.
          Cannot be updated.
        type: string # TODO
        required: false
      livenessProbe:
        description: >-
          Periodic probe of container liveness. Container will be restarted if the probe fails.
          Cannot be updated.
        type: string # TODO
        required: false
      readinessProbe:
        description: >-
          Periodic probe of container service readiness. Container will be removed from service
          endpoints if the probe fails. Cannot be updated.
        type: string # TODO
        required: false
      terminationMessagePolicy:
        description: >-
          Indicate how the termination message should be populated. File will use the contents of
          terminationMessagePath to populate the container status message on both success and
          failure. FallbackToLogsOnError will use the last chunk of container log output if the
          termination message file is empty and the container exited with an error. The log output
          is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be
          updated.
        type: string # TODO
        required: false
      terminationMessagePath:
        description: >-
          Optional: Path at which the file to which the container's termination message will be
          written is mounted into the container's filesystem. Message written is intended to be
          brief final status, such as an assertion failure message. Will be truncated by the node
          if greater than 4096 bytes. The total message length across all containers will be limited
          to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        type: string # TODO
        required: false

      # Security
      securityContext:
        description: >-
          Security options the pod should run with.
        type: SecurityContext
        required: false

  EnvVar:
    metadata:
      specification.url: 'https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#envvar-v1-core'
    description: >-
      EnvVar represents an environment variable present in a Container.
    properties:
      name:
        description: >-
          Name of the environment variable. Must be a C_IDENTIFIER.
        type: string
      value:
        description: >-
          Variable references $(VAR_NAME) are expanded using the previous defined environment variables in
          the container and any service environment variables. If a variable cannot be resolved, the
          reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double
          $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable
          exists or not. Defaults to "".
        type: string
      valueFrom:
        description: >-
          Source for the environment variable's value. Cannot be used if value is not empty.
        type: EnvVarSource
        required: false

  EnvVarSource:
    metadata:
      specification.url: 'https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#envvarsource-v1-core'
    description: >-
      EnvVarSource represents a source for the value of an EnvVar.
    properties:
      configMapKeyRef:
        description: >-
          Selects a key of a ConfigMap.
        type: string # TODO
        required: false
      fieldRef:
        description: >-
          Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels,
          metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP,
          status.podIPs.
        type: string # TODO
        required: false
      resourceFieldRef:
        description: >-
          Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory,
          limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently
          supported.
        type: string # TODO
        required: false
      secretKeyRef:
        description: >-
          Selects a key of a secret in the pod's namespace.
        type: string # TODO
        required: false

  VolumeMount:
    metadata:
      specification.url: 'https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#volumemount-v1-core'
    description: >-
      VolumeMount describes a mounting of a Volume within a container.
    properties:
      mountPath:
        description: >-
          Path within the container at which the volume should be mounted. Must not contain ':'.
        type: string
        required: false
      mountPropagation:
        description: >-
          mountPropagation determines how mounts are propagated from the host to container and the other way
          around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        type: string
        required: false
      name:
        description: >-
          This must match the Name of a Volume.
        type: string
        required: false
      readOnly:
        description: >-
          Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        type: boolean
        required: false
      subPath:
        description: >-
          Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's
          root).
        type: string
        required: false
      subPathExpr:
        description: >-
          Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to
          SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
          Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        type: string
        required: false

  SecurityContext:
    metadata:
      specification.url: 'https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#securitycontext-v1-core'
    description: >-
      SecurityContext holds security configuration that will be applied to a container. Some fields are present
      in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take
      precedence.
    properties:
      allowPrivilegeEscalation:
        description: >-
          AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process.
          This bool directly controls if the no_new_privs flag will be set on the container process.
          AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN.
        type: boolean
        required: false
      capabilities:
        description: >-
          The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted
          by the container runtime.
        type: Capabilities
        required: false
      privileged:
        description: >-
          Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on
          the host. Defaults to false.
        type: boolean
        required: false
      procMount:
        description: >-
          procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which
          uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType
          feature flag to be enabled.
        type: string
        required: false
      readOnlyRootFilesystem:
        description: >-
          Whether this container has a read-only root filesystem. Default is false.
        type: boolean
        required: false
      runAsGroup:
        description: >-
          The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be
          set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified
          in SecurityContext takes precedence.
        type: integer
        required: false
      runAsNonRoot:
        description: >-
          Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image
          at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does.
          If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        type: boolean
        required: false
      runAsUser:
        description: >-
          The UID to run the entrypoint of the container process. Defaults to user specified in image metadata
          if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
        type: integer
        required: false
      seLinuxOptions:
        description: >-
          The SELinux context to be applied to the container. If unspecified, the container runtime will allocate
          a random SELinux context for each container. May also be set in PodSecurityContext. If set in both
          SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        type: integer # TODO
        required: false
      windowsOptions:
        description: >-
          The Windows specific settings applied to all containers. If unspecified, the options from the
          PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified
          in SecurityContext takes precedence.
        type: integer # TODO
        required: false

  PodSecurityContext:
    metadata:
      specification.url: 'https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#podsecuritycontext-v1-core'
    description: >-
      PodSecurityContext holds pod-level security attributes and common container settings. Some fields are
      also present in container.securityContext. Field values of container.securityContext take precedence over
      field values of PodSecurityContext.
    properties:
      fsGroup:
        description: >-
          A special supplemental group that applies to all containers in a pod. Some volume types allow the
          Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be
          the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3.
          The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and
          permissions of any volume.
        type: integer
        required: false
      fsGroupChangePolicy:
        description: >-
          fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being
          exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership
          (and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and
          emptydir. Valid values are "OnRootMismatch" and "Always". If not specified defaults to "Always".
        type: string
        constraints:
        - valid_values: [ OnRootMismatch, Always ]
        required: false
      runAsGroup:
        description: >-
          The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be
          set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified
          in SecurityContext takes precedence for that container.
        type: integer
        required: false
      runAsNonRoot:
        description: >-
          Indicates that the container must run as a non-root user. If true, the Kubelet will validate the
          image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if
          it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.
          If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes
          precedence.
        type: boolean
        required: false
      runAsUser:
        description: >-
          The UID to run the entrypoint of the container process. Defaults to user specified in image metadata
          if unspecified. May also be set in SecurityContext. If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        type: integer
        required: false
      seLinuxOptions:
        description: >-
          The SELinux context to be applied to all containers. If unspecified, the container runtime will
          allocate a random SELinux context for each container. May also be set in SecurityContext. If set
          in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes
          precedence for that container.
        type: integer # TODO
        required: false
      supplementalGroups:
        description: >-
          A list of groups applied to the first process run in each container, in addition to the container's
          primary GID. If unspecified, no groups will be added to any container.
        type: list
        entry_schema: integer
        required: false
      sysctls:
        description: >-
          Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the
          container runtime) might fail to launch.
        type: list
        entry_schema: integer # TODO
        required: false
      windowsOptions:
        description: >-
          The Windows specific settings applied to all containers. If unspecified, the options within a
          container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext,
          the value specified in SecurityContext takes precedence.
        type: integer # TODO
        required: false

  Capabilities:
    metadata:
      specification.url: 'https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#capabilities-v1-core'
    description: >-
      Adds and removes POSIX capabilities from running containers.
    properties:
      add:
        description: >-
          Added capabilities.
        type: list
        entry_schema: string
        required: false
      drop:
        description: >-
          Removed capabilities.
        type: list
        entry_schema: string
        required: false

  Affinity:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#affinity-v1-core'
    description: >-
      Affinity is a group of affinity scheduling rules.
    properties:
      nodeAffinity:
        description: >-
          Describes node affinity scheduling rules for the pod.
        type: NodeAffinity
        required: false
      podAffinity:
        description: >-
          Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone,
          etc. as some other pod(s)).
        type: PodAffinity
        required: false
      podAntiAffinity:
        description: >-
          Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same
          node, zone, etc. as some other pod(s)).
        type: PodAntiAffinity
        required: false

  NodeAffinity:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#affinity-v1-core'
    description: >-
      Node affinity is a group of node affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: >-
          The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions
          specified by this field, but it may choose a node that violates one or more of the
          expressions. The node that is most preferred is the one with the greatest sum of weights,
          i.e. for each node that meets all of the scheduling requirements (resource request,
          requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through
          the elements of this field and adding "weight" to the sum if the node matches the
          corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        type: list
        entry_schema: string # TODO: PreferredSchedulingTerm
        required: false
      requiredDuringSchedulingIgnoredDuringExecution:
        description: >-
          If the affinity requirements specified by this field are not met at scheduling time, the
          pod will not be scheduled onto the node. If the affinity requirements specified by this
          field cease to be met at some point during pod execution (e.g. due to an update), the
          system may or may not try to eventually evict the pod from its node.
        type: string # TODO: NodeSelector
        required: false

  PodAffinity:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#podaffinity-v1-core'
    description: >-
      Pod affinity is a group of inter pod affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: >-
          The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions
          specified by this field, but it may choose a node that violates one or more of the
          expressions. The node that is most preferred is the one with the greatest sum of weights,
          i.e. for each node that meets all of the scheduling requirements (resource request,
          requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through
          the elements of this field and adding "weight" to the sum if the node has pods which
          matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most
          preferred.
        type: list
        entry_schema: string # TODO: WeightedPodAffinityTerm
        required: false
      requiredDuringSchedulingIgnoredDuringExecution:
        description: >-
          If the affinity requirements specified by this field are not met at scheduling time, the
          pod will not be scheduled onto the node. If the affinity requirements specified by this
          field cease to be met at some point during pod execution (e.g. due to a pod label update),
          the system may or may not try to eventually evict the pod from its node. When there are
          multiple elements, the lists of nodes corresponding to each podAffinityTerm are
          intersected, i.e. all terms must be satisfied.
        type: list
        entry_schema: string # TODO: PodAffinityTerm
        required: false

  PodAntiAffinity:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#podantiaffinity-v1-core'
    description: >-
      Pod anti affinity is a group of inter pod anti affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: >-
          The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity
          expressions specified by this field, but it may choose a node that violates one or more of
          the expressions. The node that is most preferred is the one with the greatest sum of
          weights, i.e. for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by
          iterating through the elements of this field and adding "weight" to the sum if the node
          has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum
          are the most preferred.
        type: list
        entry_schema: string # TODO: WeightedPodAffinityTerm
        required: false
      requiredDuringSchedulingIgnoredDuringExecution:
        description: >-
          If the anti-affinity requirements specified by this field are not met at scheduling time,
          the pod will not be scheduled onto the node. If the anti-affinity requirements specified
          by this field cease to be met at some point during pod execution (e.g. due to a pod label
          update), the system may or may not try to eventually evict the pod from its node. When
          there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are
          intersected, i.e. all terms must be satisfied.
        type: list
        entry_schema: string # TODO: PodAffinityTerm
        required: false

  PersistentVolumeClaim:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#persistentvolumeclaimspec-v1-core'
    description: >-
      PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a
      Source for provider-specific attributes.
    properties:
      accessModes:
        description: >-
          AccessModes contains the desired access modes the volume should have.
        type: string # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes-1
        required: false
      dataSource:
        description: >-
          This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and
          currently VolumeSnapshot is the only supported data source. If the provisioner can support
          VolumeSnapshot data source, it will create a new volume and data will be restored to the
          volume at the same time. If the provisioner does not support VolumeSnapshot data source,
          volume will not be created and the failure will be reported as an event. In the future, we
          plan to support more data source types and the behavior of the provisioner may change.
        type: string # TODO
        required: false
      resources:
        description: >-
          Resources represents the minimum resources the volume should have.
        type: ResourceRequirements
        required: false
      selector:
        description: >-
          A label query over volumes to consider for binding.
        type: LabelSelector
        required: false
      storageClassName:
        description: >-
          Name of the StorageClass required by the claim.
        type: string
        required: false
      volumeMode:
        description: >-
          volumeMode defines what type of volume is required by the claim. Value of Filesystem is
          implied when not included in claim spec. This is a beta feature.
        type: string # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#volume-mode
        required: false
      volumeName:
        description: >-
          VolumeName is the binding reference to the PersistentVolume backing this claim.
        type: string
        required: false

  ResourceRequirements:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#resourcerequirements-v1-core'
    properties:
      limits:
        description: >-
          Limits describes the maximum amount of compute resources allowed. Valid resource keys are
          "memory" and "cpu".
        type: map
        entry_schema: string
        required: false
      overcommitGuestOverhead:
        description: >-
          Don't ask the scheduler to take the guest-management overhead into account. Instead put
          the overhead only into the container’s memory limit. This can lead to crashes if all
          memory is in use on a node. Defaults to false.
        type: boolean
        default: false
        required: false
      requests:
        description: >-
          Requests is a description of the initial vmi resources. Valid resource keys are "memory"
          and "cpu".
        type: map
        entry_schema: string
        required: false

  # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#toleration-v1-core
  # https://kubevirt.io/api-reference/v0.27.0/definitions.html#_v1_toleration
  Toleration:
    description: >-
      The pod this Toleration is attached to tolerates any taint that matches the triple
      <key,value,effect> using the matching operator <operator>.
    properties:
      effect:
        description: >-
          Effect indicates the taint effect to match. Empty means match all taint effects. When
          specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute
        type: string
        constraints:
        - valid_values: [ NoSchedule, PreferNoSchedule, NoExecute ]
        required: false
      key:
        description: >-
          Key is the taint key that the toleration applies to. Empty means match all taint keys. If
          the key is empty, operator must be Exists; this combination means to match all values and
          all keys.
        type: string
        required: false
      operator:
        description: >-
          Operator represents a key's relationship to the value. Valid operators are Exists and
          Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can
          tolerate all taints of a particular category.
        type: string
        constraints:
        - valid_values: [ Exists, Equal ]
        required: false
      tolerationSeconds:
        description: >-
          TolerationSeconds represents the period of time the toleration (which must be of effect
          NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not
          set, which means tolerate the taint forever (do not evict). Zero and negative values will
          be treated as 0 (evict immediately) by the system.
        type: integer
        required: false
      value:
        description: >-
          Value is the taint value the toleration matches to. If the operator is Exists, the value
          should be empty, otherwise just a regular string.
        type: string
        required: false

  # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#volume-v1-core
  Volume: {}

  CNIConfig:
    metadata:
      puccini.information:turandot.format: json
    properties:
      version:
        type: string
        default: 0.3.1
      type:
        type: string
      name:
        type: string
        required: false
      ipam:
        type: IPAM
        required: false

  IPAM:
    properties:
      type:
        type: string
        required: false
      subnet:
        type: string
        required: false
      rangeStart:
        type: string
        required: false
      rangeEnd:
        type: string
        required: false
      routes:
        type: list
        entry_schema: IPAMRoute
        required: false
      gateway:
        type: string

  IPAMRoute:
    properties:
      dst:
        type: string

  BridgeCNIConfig:
    metadata:
      specification.guide.url: 'https://github.com/containernetworking/plugins/tree/master/plugins/main/bridge'
      puccini.information:turandot.format: json
    derived_from: CNIConfig
    properties:
      type:
        type: string
        default: bridge
      bridge:
        type: string
      isDefaultGateway:
        type: boolean
        required: false
      ipMasq:
        type: boolean
        required: false
      promiscMode:
        type: boolean
        required: false

  CustomResourceConversion:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#customresourceconversion-v1-apiextensions-k8s-io'
    description: >-
      CustomResourceConversion describes how to convert different versions of a CR.
    properties:
      strategy:
        description: >-
          strategy specifies how custom resources are converted between versions. Allowed values
          are:

          - `None`: The converter only change the apiVersion and would not touch any other field in
          the custom resource.

          - `Webhook`: API Server will call to an external webhook to do the conversion. Additional
          information is needed for this option. This requires spec.preserveUnknownFields to be
          false, and spec.conversion.webhook to be set.
        type: string
        constraints:
        - valid_values: [ None, Webhook ]
        required: false
      webhook:
        description: >-
          webhook describes how to call the conversion webhook. Required when `strategy` is set to
          `Webhook`.
        type: WebhookConversion
        required: false

  WebhookConversion:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#webhookconversion-v1-apiextensions-k8s-io'
    description: >-
      WebhookConversion describes how to call a conversion webhook.
    properties:
      clientConfig:
        description: >-
          clientConfig is the instructions for how to call the webhook if strategy is `Webhook`.
        type: WebhookClientConfig
        required: false
      conversionReviewVersions:
        description: >-
          conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the
          Webhook expects. The API server will use the first version in the list which it supports.
          If none of the versions specified in this list are supported by API server, conversion
          will fail for the custom resource. If a persisted Webhook configuration specifies allowed
          versions and does not include any versions known to the API Server, calls to the webhook
          will fail.
        type: list
        entry_schema: string
        required: false

  WebhookClientConfig:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#webhookclientconfig-v1-apiextensions-k8s-io'
    properties:
      caBundle:
        description: >-
          caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server
          certificate. If unspecified, system trust roots on the apiserver are used.
        type: string
        required: false
      service:
        description: >-
          service is a reference to the service for this webhook. Either service or url must be
          specified. If the webhook is running within the cluster, then you should use `service`.
        type: ServiceReference
        required: false
      url:
        description: >-
          url gives the location of the webhook, in standard URL form (`scheme://host:port/path`).
          Exactly one of `url` or `service` must be specified. The `host` should not refer to a
          service running in the cluster; use the `service` field instead. The host might be
          resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve
          in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
          Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take
          great care to run this webhook on all hosts which run an apiserver which might need to
          make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to
          turn up in a new cluster. The scheme must be "https"; the URL must begin with "https://".
          A path is optional, and if present may be any string permissible in a URL. You may use the
          path to pass an arbitrary string to the webhook, for example, a cluster identifier.
          Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments
          ("#...") and query parameters ("?...") are not allowed, either.
        type: string
        required: false

  ServiceReference:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#servicereference-v1-apiextensions-k8s-io'
    properties:
      name:
        description: >-
          name is the name of the service.
        type: string
      namespace:
        description: >-
          namespace is the namespace of the service.
        type: string
      path:
        description: >-
          path is an optional URL path at which the webhook will be contacted.
        type: string
        required: false
      port:
        description: >-
          port is an optional service port at which the webhook will be contacted. `port` should be
          a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.
        type: integer
        default: 443
        required: false

  CustomResourceDefinitionNames:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#customresourcedefinitionnames-v1-apiextensions-k8s-io'
    description: >-
      CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition.
    properties:
      categories:
        description: >-
          categories is a list of grouped resources this custom resource belongs to (e.g. 'all').
          This is published in API discovery documents, and used by clients to support invocations
          like `kubectl get all`.
        type: list
        entry_schema: string
        required: false
      kind:
        description: >-
          kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom
          resource instances will use this value as the `kind` attribute in API calls.
        type: string
        required: false
      listKind:
        description: >-
          listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
        type: string
        required: false
      plural:
        description: >-
          plural is the plural name of the resource to serve. The custom resources are served under
          `/apis/<group>/<version>/.../<plural>`. Must match the name of the
          CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
        type: string
        required: false
      shortNames:
        description: >-
          shortNames are short names for the resource, exposed in API discovery documents, and used
          by clients to support invocations like `kubectl get <shortname>`. It must be all
          lowercase.
        type: list
        entry_schema: string
        required: false
      singular:
        description: >-
          singular is the singular name of the resource. It must be all lowercase. Defaults to
          lowercased `kind`.
        type: string
        required: false

  CustomResourceDefinitionVersion:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#customresourcedefinitionversion-v1-apiextensions-k8s-io'
    description: >-
      CustomResourceDefinitionVersion describes a version for CRD.
    properties:
      additionalPrinterColumns:
        description: >-
          additionalPrinterColumns specifies additional columns returned in Table output. If no
          columns are specified, a single column displaying the age of the custom resource is used.
        type: list
        entry_schema: CustomResourceColumnDefinition
        required: false
      name:
        description: >-
          name is the version name, e.g. "v1", "v2beta1", etc. The custom resources are served under
          this version at `/apis/<group>/<version>/...` if `served` is true.
        type: string
        required: false
      schema:
        description: >-
          schema describes the schema used for validation, pruning, and defaulting of this version
          of the custom resource.
        type: CustomResourceValidation
        required: false
      served:
        description: >-
          served is a flag enabling/disabling this version from being served via REST APIs.
        type: boolean
        required: false
      storage:
        description: >-
          storage indicates this version should be used when persisting custom resources to storage.
          There must be exactly one version with storage=true.
        type: boolean
        required: false
      subresources:
        description: >-
          subresources specify what subresources this version of the defined custom resource have.
        type: CustomResourceSubresources
        required: false

  CustomResourceColumnDefinition:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#customresourcecolumndefinition-v1-apiextensions-k8s-io'
    description: >-
      CustomResourceColumnDefinition specifies a column for server side printing.
    properties:
      description:
        description: >-
          description is a human readable description of this column.
        type: string
        required: false
      format:
        description: >-
          format is an optional OpenAPI type definition for this column. The 'name' format is
          applied to the primary identifier column to assist in clients identifying column is the
          resource name.
        type: string
        required: false
      jsonPath:
        description: >-
          jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each
          custom resource to produce the value for this column.
        type: string
        required: false
      name:
        description: >-
          name is a human readable name for the column.
        type: string
        required: false
      priority:
        description: >-
          priority is an integer defining the relative importance of this column compared to others.
          Lower numbers are considered higher priority. Columns that may be omitted in limited space
          scenarios should be given a priority greater than 0.
        type: integer
        required: false
      type:
        description: >-
          type is an OpenAPI type definition for this column.
        type: string
        required: false

  CustomResourceValidation:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#customresourcevalidation-v1-apiextensions-k8s-io'
    description: >-
      CustomResourceValidation is a list of validation methods for CustomResources.
    properties:
      openAPIV3Schema:
        description: >-
          openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
        type: JSONSchemaProps
        required: false

  JSONSchemaProps:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#jsonschemaprops-v1-apiextensions-k8s-io'
    description: >-
      JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
    properties:
      $ref:
        type: string
        required: false
      $schema:
        type: string
        required: false
      additionalItems:
        type: JSONSchemaPropsOrBool
        required: false
      additionalProperties:
        type: JSONSchemaPropsOrBool
        required: false
      allOf:
        type: list
        entry_schema: JSONSchemaProps
        required: false
      anyOf:
        type: list
        entry_schema: JSONSchemaProps
        required: false
      default:
        description: >-
          default is a default value for undefined object fields. Defaulting is a beta feature under
          the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields
          to be false.
        type: JSON
        required: false
      definitions:
        type: string # TODO
        required: false
      dependencies:
        type: string # TODO
        required: false
      description:
        type: string
        required: false
      enum:
        type: list
        entry_schema: JSON # TODO
        required: false
      example:
        type: JSON
        required: false
      exclusiveMaximum:
        type: boolean
        required: false
      exclusiveMinimum:
        type: boolean
        required: false
      externalDocs:
        type: ExternalDocumentation
        required: false
      format:
        description: >-
          format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats
          are validated:

          - bsonobjectid: a bson object ID, i.e. a 24 characters hex string

          - uri: an URI as parsed by Golang net/url.ParseRequestURI

          - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid
          representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034].

          - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang
          net.ParseIP

          - cidr: a CIDR as parsed by Golang net.ParseCIDR

          - mac: a MAC address as parsed by Golang net.ParseMAC

          - uuid: an UUID that allows uppercase defined by the regex
          (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$

          - uuid3: an UUID3 that allows uppercase defined by the regex
          (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$

          - uuid4: an UUID4 that allows uppercase defined by the regex
          (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$

          - uuid5: an UUID5 that allows uppercase defined by the regex
          (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$

          - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041"

          - isbn10: an ISBN10 number string like "0321751043"

          - isbn13: an ISBN13 number string like "978-0321751041"

          - creditcard: a credit card number defined by the regex
          ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$
          with any non digit characters mixed in

          - ssn: a U.S. social security number following the regex ^\d{3}[- ]?\d{2}[- ]?\d{4}$

          - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$

          - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559)"

          - byte: base64 encoded binary data

          - password: any kind of string

          - date: a date string like "2006-01-02" as defined by full-date in RFC3339

          - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or
          compatible with Scala duration format.

          - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
        type: string
        required: false
      id:
        type: string
        required: false
      items:
        type: JSONSchemaPropsOrArray
        required: false
      maxItems:
        type: integer
        required: false
      maxLength:
        type: integer
        required: false
      maxProperties:
        type: integer
        required: false
      maximum:
        type: float
        required: false
      minItems:
        type: integer
        required: false
      minLength:
        type: integer
        required: false
      minProperties:
        type: integer
        required: false
      minimum:
        type: float
        required: false
      multipleOf:
        type: float
        required: false
      not:
        type: JSONSchemaProps
        required: false
      nullable:
        type: boolean
        required: false
      oneOf:
        type: list
        entry_schema: JSONSchemaProps
        required: false
      pattern:
        type: string
        required: false
      patternProperties:
        type: string # TODO
        required: false
      properties:
        type: string # TODO
        required: false
      required:
        type: list
        entry_schema: string
        required: false
      title:
        type: string
        required: false
      type:
        type: string
        required: false
      uniqueItems:
        type: boolean
        required: false
      x-kubernetes-embedded-resource:
        description: >-
          x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes
          runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to
          further restrict the embedded object. kind, apiVersion and metadata are validated
          automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not
          have to be if the object is fully specified (up to kind, apiVersion, metadata).
        type: boolean
        required: false
      x-kubernetes-int-or-string:
        description: >-
          x-kubernetes-int-or-string specifies that this value is either an integer or a string. If
          this is true, an empty type is allowed and type as child of anyOf is permitted if
          following one of the following patterns:

          1) anyOf:
            - type: integer
            - type: string
          2) allOf:
             - anyOf:
               - type: integer
               - type: string
               - ... zero or more
        type: boolean
        required: false
      x-kubernetes-list-map-keys:
        description: >-
          x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by
          specifying the keys used as the index of the map. This tag MUST only be used on lists that
          have the "x-kubernetes-list-type" extension set to "map". Also, the values specified for
          this attribute must be a scalar typed field of the child structure (no nesting is
          supported). The properties specified must either be required or have a default value, to
          ensure those properties are present for all list items.
        type: list
        entry_schema: string
        required: false
      x-kubernetes-list-type:
        description: >-
          x-kubernetes-list-type annotates an array to further describe its topology. This extension
          must only be used on lists and may have 3 possible values:

          1) `atomic`: the list is treated as a single entity, like a scalar. Atomic lists will be
          entirely replaced when updated. This extension may be used on any type of list (struct,
          scalar, ...).

          2) `set`: Sets are lists that must not have multiple items with the same value. Each value
          must be a scalar, an object with x-kubernetes-map-type `atomic` or an array with
          x-kubernetes-list-type `atomic`.

          3) `map`: These lists are like maps in that their elements have a non-index key used to
          identify them. Order is preserved upon merge. The map tag must only be used on a list with
          elements of type object. Defaults to atomic for arrays.
        type: string
        constraints:
        - valid_values: [ atomic, set, map ]
        required: false
      x-kubernetes-map-type:
        description: >-
          x-kubernetes-map-type annotates an object to further describe its topology. This extension
          must only be used when type is object and may have 2 possible values:

          1) `granular`: These maps are actual maps (key-value pairs) and each fields are
          independent from each other (they can each be manipulated by separate actors). This is the
          default behaviour for all maps.

          2) `atomic`: the list is treated as a single entity, like a scalar. Atomic maps will be
          entirely replaced when updated.
        type: string
        constraints:
        - valid_values: [ granular, atomic ]
        required: false
      x-kubernetes-preserve-unknown-fields:
        description: >-
          x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning
          fields which are not specified in the validation schema. This affects fields recursively,
          but switches back to normal pruning behaviour if nested properties or additionalProperties
          are specified in the schema. This can either be true or undefined. False is forbidden.
        type: boolean
        constraints:
        - valid_values: [ true ]
        required: false

  JSONSchemaPropsOrBool:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#jsonschemapropsorbool-v1-apiextensions-k8s-io'
    description: >-
      JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the
      boolean property.
    properties:
      properties:
        type: JSONSchemaProps
        required: false
      boolean:
        type: boolean
        required: false

  JSONSchemaPropsOrArray:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#jsonschemapropsorarray-v1-apiextensions-k8s-io'
    description: >-
      JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of
      JSONSchemaProps. Mainly here for serialization purposes.
    properties:
      properties:
        type: JSONSchemaProps
        required: false
      list:
        type: list
        entry_schema: JSONSchemaProps
        required: false

  ExternalDocumentation:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#externaldocumentation-v1-apiextensions-k8s-io'
    description: >-
      ExternalDocumentation allows referencing an external resource for extended documentation.
    properties:
      description:
        type: string
        required: false
      url:
        type: string
        required: false

  JSON:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#json-v1-apiextensions-k8s-io'
    description: >-
      JSON represents any valid JSON value. These types are supported: bool, int64, float64, string,
      []interface{}, map[string]interface{} and nil.
    properties:
      boolean:
        type: boolean
        required: false
      integer:
        type: integer
        required: false
      float:
        type: float
        required: false
      string:
        type: string
        required: false
      list:
        type: list
        entry_schema: JSON
        required: false
      map:
        type: map
        entry_schema: JSON
        required: false
      'null':
        type: 'null'
        required: false

  CustomResourceSubresources:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#customresourcesubresources-v1-apiextensions-k8s-io'
    description: >-
      CustomResourceSubresources defines the status and scale subresources for CustomResources.
    properties:
      scale:
        description: >-
          scale indicates the custom resource should serve a `/scale` subresource that returns an
          `autoscaling/v1` Scale object.
        type: CustomResourceSubresourceScale
        required: false
      status:
        description: >-
          status indicates the custom resource should serve a `/status` subresource. When enabled:

          1. requests to the custom resource primary endpoint ignore changes to the `status` stanza
          of the object.

          2. requests to the custom resource `/status` subresource ignore changes to anything other
          than the `status` stanza of the object.
        type: CustomResourceSubresourceStatus
        required: false

  CustomResourceSubresourceScale:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#customresourcesubresourcescale-v1-apiextensions-k8s-io'
    description: >-
      CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
    properties:
      labelSelectorPath:
        description: >-
          labelSelectorPath defines the JSON path inside of a custom resource that corresponds to
          Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be
          a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler.
          The field pointed by this JSON path must be a string field (not a complex selector struct)
          which contains a serialized label selector in string form. If there is no value under the
          given path in the custom resource, the `status.selector` value in the `/scale`
          subresource will default to the empty string.
        type: string
        required: false
      specReplicasPath:
        description: >-
          specReplicasPath defines the JSON path inside of a custom resource that corresponds to
          Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a
          JSON Path under `.spec`. If there is no value under the given path in the custom resource,
          the `/scale` subresource will return an error on GET.
        type: string
        required: false
      statusReplicasPath:
        description: >-
          statusReplicasPath defines the JSON path inside of a custom resource that corresponds to
          Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a
          JSON Path under `.status`. If there is no value under the given path in the custom
          resource, the `status.replicas` value in the `/scale` subresource will default to 0.
        type: string
        required: false

  CustomResourceSubresourceStatus:
    metadata:
      specification.url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#customresourcesubresourcestatus-v1-apiextensions-k8s-io'
    description: >-
      CustomResourceSubresourceStatus defines how to serve the status subresource for
      CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource.
      When set,

      * exposes a /status subresource for the custom resource

      * PUT requests to the /status subresource take a custom resource object, and ignore changes to
      anything except the status stanza

      * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza.

  # Execution

  ExecutionPods:
    description: >-
      On which pods to execute.
    derived_from: string
    constraints:
    - valid_values: [ all, any ]
